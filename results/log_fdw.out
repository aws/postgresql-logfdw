--
-- Test foreign-data wrapper log_fdw.
--
-- Clean up in case a prior regression run failed
SET client_min_messages TO 'error';
DROP ROLE IF EXISTS log_fdw_superuser, log_fdw_user, no_priv_user, "rds_superuser";
RESET client_min_messages;
CREATE ROLE log_fdw_superuser LOGIN SUPERUSER; -- is a superuser
CREATE ROLE log_fdw_user LOGIN;                -- has priv and user mapping
CREATE ROLE no_priv_user LOGIN;                 -- has priv but no user mapping
CREATE ROLE "rds_superuser" nosuperuser nologin nocreaterole inherit noreplication;
DROP extension if exists log_fdw;
NOTICE:  extension "log_fdw" does not exist, skipping
-- Install log_fdw
CREATE EXTENSION log_fdw;
-- log_fdw_superuser owns fdw-related objects
SET ROLE log_fdw_superuser;
CREATE SERVER log_server FOREIGN DATA WRAPPER log_fdw;
-- privilege tests
SET ROLE log_fdw_user;
CREATE FOREIGN DATA WRAPPER log_fdw2 HANDLER log_fdw_handler VALIDATOR log_fdw_validator;   -- ERROR
ERROR:  permission denied to create foreign-data wrapper "log_fdw2"
HINT:  Must be superuser to create a foreign-data wrapper.
CREATE SERVER log_server2 FOREIGN DATA WRAPPER log_fdw;   -- ERROR
ERROR:  permission denied for foreign-data wrapper log_fdw
CREATE USER MAPPING FOR log_fdw_user SERVER log_server;   -- ERROR
ERROR:  permission denied for foreign server log_server
SET ROLE log_fdw_superuser;
GRANT USAGE ON FOREIGN SERVER log_server TO log_fdw_user;
SET ROLE log_fdw_user;
CREATE USER MAPPING FOR log_fdw_user SERVER log_server;
-- create user mappings and grant privilege to test users
SET ROLE log_fdw_superuser;
CREATE USER MAPPING FOR log_fdw_superuser SERVER log_server;
CREATE USER MAPPING FOR no_priv_user SERVER log_server;
-- validator tests
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'xml');  -- ERROR
ERROR:  COPY format "xml" not recognized
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', header 'true');      -- ERROR
ERROR:  COPY HEADER available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', quote ':');          -- ERROR
ERROR:  COPY quote available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', escape ':');         -- ERROR
ERROR:  COPY escape available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'binary', header 'true');    -- ERROR
ERROR:  COPY HEADER available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'binary', quote ':');        -- ERROR
ERROR:  COPY quote available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'binary', escape ':');       -- ERROR
ERROR:  COPY escape available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', delimiter 'a');      -- ERROR
ERROR:  COPY delimiter cannot be "a"
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', escape '-');         -- ERROR
ERROR:  COPY escape available only in CSV mode
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', quote '-', null '=-=');   -- ERROR
ERROR:  CSV quote character must not appear in the NULL specification
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', delimiter '-', null '=-=');    -- ERROR
ERROR:  COPY delimiter must not appear in the NULL specification
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', delimiter '-', quote '-');    -- ERROR
ERROR:  COPY delimiter and quote must be different
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', delimiter '---');     -- ERROR
ERROR:  COPY delimiter must be a single one-byte character
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', quote '---');         -- ERROR
ERROR:  COPY quote must be a single one-byte character
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', escape '---');        -- ERROR
ERROR:  COPY escape must be a single one-byte character
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', delimiter '\');       -- ERROR
ERROR:  COPY delimiter cannot be "\"
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', delimiter '.');       -- ERROR
ERROR:  COPY delimiter cannot be "."
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', delimiter '1');       -- ERROR
ERROR:  COPY delimiter cannot be "1"
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'text', delimiter 'a');       -- ERROR
ERROR:  COPY delimiter cannot be "a"
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', delimiter '');       -- ERROR
ERROR:  COPY delimiter must be a single one-byte character
CREATE FOREIGN TABLE tbl () SERVER log_server OPTIONS (format 'csv', null '');       -- ERROR
ERROR:  either filename or program is required for log_fdw foreign tables
CREATE FOREIGN TABLE tbl () SERVER log_server;  -- ERROR
ERROR:  either filename or program is required for log_fdw foreign tables
-- file path validation tests
CREATE FOREIGN TABLE agg_text (
	a	int2 CHECK (a >= 0),
	b	float4
) SERVER log_server
OPTIONS (filename 'a');
CREATE FOREIGN TABLE agg_text (
        a       int2 CHECK (a >= 0),
        b       float4
) SERVER log_server
OPTIONS (filename 'alsdfkjalskdjfhlsdkjhasdflkjahsdflkjhasdflkjhasdlfkjahsdlfkjhasdlkfjhasdf');
ERROR:  relation "agg_text" already exists
CREATE FOREIGN TABLE agg_text (
        a       int2 CHECK (a >= 0),
        b       float4
) SERVER log_server
OPTIONS (filename '/rdsdbdata/log/error/../../../hax.csv');
ERROR:  relation "agg_text" already exists
CREATE FOREIGN TABLE agg_text (
        a       int2 CHECK (a >= 0),
        b       float4
) SERVER log_server
OPTIONS (filename '/rdsdbdata/log/error/postgresql.log.abcdef.csv');
ERROR:  relation "agg_text" already exists
CREATE FOREIGN TABLE pglog_1 (
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  leader_pid integer,
  query_id bigint
) SERVER log_server
OPTIONS ( filename '/rdsdbdata/log/error/postgresql.log.2016-08-09-22.csv');
GRANT SELECT ON pglog_1 to log_fdw_user;
ALTER FOREIGN TABLE pglog_1 ADD CHECK (process_id > 0);
CREATE FOREIGN TABLE pglog_2 (
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  leader_pid integer,
  query_id bigint
) SERVER log_server
OPTIONS ( filename '/rdsdbdata/log/error/postgresql.log.2016-08-09-23.csv');
ALTER FOREIGN TABLE pglog_2 ADD CHECK (process_id > 0);
CREATE FOREIGN TABLE pglog_3 (
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  leader_pid integer,
  query_id bigint
) SERVER log_server
OPTIONS ( filename '/rdsdbdata/log/error/postgresql.log.2016-08-10-00.csv');
ALTER FOREIGN TABLE pglog_3 ADD CHECK (process_id > 0);
CREATE FOREIGN TABLE pglog_bad (
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text
) SERVER log_server
OPTIONS ( filename '/rdsdbdata/log/error/postgresql.log.2016-08-10-01.csv');
-- basic query tests
SELECT log_time, process_id, error_severity, message FROM pglog_1 where error_severity = 'LOG';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT log_time, process_id, error_severity, message FROM pglog_2 ORDER BY log_time DESC;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT log_time, process_id, error_severity, message FROM pglog_3 where log_time = 'Tue Aug 09 15:45:20.066 2016 PDT';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- error context report tests
SELECT * FROM pglog_bad;               -- ERROR
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- misc query tests
\t on
EXPLAIN (VERBOSE, COSTS FALSE) SELECT * FROM pglog_1;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
\t off
PREPARE st(text) AS SELECT * FROM pglog_1 WHERE error_severity = $1;
EXECUTE st('DEBUG');
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
EXECUTE st('DEBUG');
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
DEALLOCATE st;
-- tableoid
SELECT tableoid::regclass, log_time FROM pglog_2;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- updates aren't supported
UPDATE pglog_1 SET error_severity = 'WARNING';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
DELETE FROM pglog_2 WHERE error_severity = 'DEBUG';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- but this should be allowed
SELECT * FROM pglog_3 FOR UPDATE;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- constraint exclusion tests
\t on
EXPLAIN (VERBOSE, COSTS FALSE) SELECT * FROM pglog_1 WHERE process_id < 0;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
\t off
SELECT * FROM pglog_1 WHERE process_id < 0;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SET constraint_exclusion = 'on';
\t on
EXPLAIN (VERBOSE, COSTS FALSE) SELECT * FROM pglog_1 WHERE process_id < 0;
 Result
   Output: log_time, user_name, database_name, process_id, connection_from, session_id, session_line_num, command_tag, session_start_time, virtual_transaction_id, transaction_id, error_severity, sql_state_code, message, detail, hint, internal_query, internal_query_pos, context, query, query_pos, location, application_name, backend_type, leader_pid, query_id
   One-Time Filter: false

\t off
SELECT * FROM pglog_1 WHERE process_id < 0;
 log_time | user_name | database_name | process_id | connection_from | session_id | session_line_num | command_tag | session_start_time | virtual_transaction_id | transaction_id | error_severity | sql_state_code | message | detail | hint | internal_query | internal_query_pos | context | query | query_pos | location | application_name | backend_type | leader_pid | query_id 
----------+-----------+---------------+------------+-----------------+------------+------------------+-------------+--------------------+------------------------+----------------+----------------+----------------+---------+--------+------+----------------+--------------------+---------+-------+-----------+----------+------------------+--------------+------------+----------
(0 rows)

RESET constraint_exclusion;
-- table inheritance tests
CREATE TABLE agg (
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  leader_pid integer,
  query_id bigint);
ALTER FOREIGN TABLE pglog_1 INHERIT agg;
SELECT tableoid::regclass, * FROM agg;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT tableoid::regclass, * FROM pglog_1;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT tableoid::regclass, * FROM ONLY agg;
 tableoid | log_time | user_name | database_name | process_id | connection_from | session_id | session_line_num | command_tag | session_start_time | virtual_transaction_id | transaction_id | error_severity | sql_state_code | message | detail | hint | internal_query | internal_query_pos | context | query | query_pos | location | application_name | backend_type | leader_pid | query_id 
----------+----------+-----------+---------------+------------+-----------------+------------+------------------+-------------+--------------------+------------------------+----------------+----------------+----------------+---------+--------+------+----------------+--------------------+---------+-------+-----------+----------+------------------+--------------+------------+----------
(0 rows)

-- updates aren't supported
UPDATE agg SET error_severity = 'WARNING';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
DELETE FROM agg WHERE error_severity = 'LOG';
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- but this should be allowed
SELECT tableoid::regclass, * FROM agg FOR UPDATE;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
ALTER FOREIGN TABLE pglog_1 NO INHERIT agg;
DROP TABLE agg;
-- privilege tests
SET ROLE log_fdw_superuser;
SELECT * FROM pglog_2 ORDER BY log_time;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SET ROLE log_fdw_user;
SELECT * FROM pglog_2 ORDER BY log_time;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SET ROLE no_priv_user;
SELECT * FROM pglog_2 ORDER BY log_time;   -- ERROR
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SET ROLE log_fdw_user;
\t on
EXPLAIN (VERBOSE, COSTS FALSE) SELECT * FROM pglog_2 WHERE process_id > 0;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
\t off
-- log FDW allows foreign tables to be accessed without user mapping
DROP USER MAPPING FOR log_fdw_user SERVER log_server;
SELECT * FROM pglog_2 ORDER BY log_time;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- privilege tests for object
SET ROLE log_fdw_superuser;
ALTER FOREIGN TABLE pglog_3 OWNER TO log_fdw_user;
ALTER FOREIGN TABLE pglog_3 OPTIONS (SET filename 'a');
ALTER FOREIGN TABLE pglog_3 OPTIONS (SET format 'text');
ERROR:  option "format" not found
ALTER FOREIGN TABLE pglog_3 OPTIONS (SET filename '/rdsdbdata/log/error/postgresql.log.2016-08-10-01.csv');
SET ROLE log_fdw_user;
ALTER FOREIGN TABLE pglog_3 OPTIONS (SET filename '/rdsdbdata/log/error/postgresql.log.2016-08-10-01.csv');
ERROR:  only superuser or a member of the pg_read_server_files role may specify the filename option of a log_fdw foreign table
SET ROLE log_fdw_superuser;
-- make sure list function works
SELECT * from list_postgres_log_files() order by 1;
         file_name         | file_size_bytes 
---------------------------+-----------------
 postgresql-2022-10-12.csv |             908
 postgresql-2022-10-12.log |             767
 postgresql-2022-10-13.csv |               0
 postgresql-2022-10-13.log |               0
 postgresql-2022-10-14.csv |               0
 postgresql-2022-10-14.log |               0
 postgresql-2022-10-15.csv |             805
 postgresql-2022-10-15.log |             662
 postgresql-2022-10-17.csv |            5114
 postgresql-2022-10-17.log |            4664
 postgresql-2022-10-18.csv |               0
 postgresql-2022-10-18.log |               0
 postgresql-2022-10-19.csv |            7368
 postgresql-2022-10-19.log |            7350
 postgresql-2022-10-20.csv |            4378
 postgresql-2022-10-20.log |            4183
 postgresql-2022-10-21.csv |               0
 postgresql-2022-10-21.log |               0
 postgresql-2022-10-22.csv |               0
 postgresql-2022-10-22.log |               0
 postgresql-2022-10-23.csv |               0
 postgresql-2022-10-23.log |               0
 postgresql-2022-10-24.csv |               0
 postgresql-2022-10-24.log |               0
 postgresql-2022-10-25.csv |               0
 postgresql-2022-10-25.log |               0
 postgresql-2022-10-26.csv |               0
 postgresql-2022-10-26.log |               0
 postgresql-2022-10-27.csv |               0
 postgresql-2022-10-27.log |               0
 postgresql-2022-10-28.csv |               0
 postgresql-2022-10-28.log |               0
 postgresql-2022-10-29.csv |               0
 postgresql-2022-10-29.log |               0
 postgresql-2022-10-30.csv |               0
 postgresql-2022-10-30.log |               0
 postgresql-2022-10-31.csv |               0
 postgresql-2022-10-31.log |               0
 postgresql-2022-11-01.csv |            4025
 postgresql-2022-11-01.log |            3641
 postgresql-2022-11-02.csv |            7945
 postgresql-2022-11-02.log |            8206
 postgresql-2022-11-03.csv |               0
 postgresql-2022-11-03.log |               0
 postgresql-2022-11-04.csv |            3943
 postgresql-2022-11-04.log |            3735
 postgresql-2022-11-05.csv |               0
 postgresql-2022-11-05.log |               0
 postgresql-2022-11-06.csv |               0
 postgresql-2022-11-06.log |               0
 postgresql-2022-11-07.csv |               0
 postgresql-2022-11-07.log |               0
 postgresql-2022-11-08.csv |            5098
 postgresql-2022-11-08.log |            5267
 postgresql-2022-11-09.csv |               0
 postgresql-2022-11-09.log |               0
 postgresql-2022-11-10.csv |             811
 postgresql-2022-11-10.log |             668
 postgresql-2022-11-11.csv |            4261
 postgresql-2022-11-11.log |            5287
 postgresql-2022-11-12.csv |               0
 postgresql-2022-11-12.log |               0
 postgresql-2022-11-13.csv |               0
 postgresql-2022-11-13.log |               0
 postgresql-2022-11-14.csv |            7735
 postgresql-2022-11-14.log |            8006
 postgresql-2022-11-15.csv |               0
 postgresql-2022-11-15.log |               0
 postgresql-2022-11-16.csv |               0
 postgresql-2022-11-16.log |               0
 postgresql-2022-11-17.csv |           69566
 postgresql-2022-11-17.log |           91650
 postgresql-2022-11-18.csv |               0
 postgresql-2022-11-18.log |               0
 postgresql-2022-11-19.csv |               0
 postgresql-2022-11-19.log |               0
 postgresql-2022-11-20.csv |               0
 postgresql-2022-11-20.log |               0
 postgresql-2022-11-21.csv |           73201
 postgresql-2022-11-21.log |          102180
 postgresql-2022-11-22.csv |           20339
 postgresql-2022-11-22.log |           28669
 postgresql-2022-11-23.csv |          568208
 postgresql-2022-11-23.log |          789872
 postgresql-2022-11-24.csv |               0
 postgresql-2022-11-24.log |               0
 postgresql-2022-11-25.csv |               0
 postgresql-2022-11-25.log |               0
 postgresql-2022-11-26.csv |               0
 postgresql-2022-11-26.log |               0
 postgresql-2022-11-27.csv |               0
 postgresql-2022-11-27.log |               0
 postgresql-2022-11-28.csv |           23400
 postgresql-2022-11-28.log |           31333
(94 rows)

SELECT list_postgres_log_files() ORDER BY 1;
      list_postgres_log_files       
------------------------------------
 (postgresql-2022-10-12.csv,908)
 (postgresql-2022-10-12.log,767)
 (postgresql-2022-10-13.csv,0)
 (postgresql-2022-10-13.log,0)
 (postgresql-2022-10-14.csv,0)
 (postgresql-2022-10-14.log,0)
 (postgresql-2022-10-15.csv,805)
 (postgresql-2022-10-15.log,662)
 (postgresql-2022-10-17.csv,5114)
 (postgresql-2022-10-17.log,4664)
 (postgresql-2022-10-18.csv,0)
 (postgresql-2022-10-18.log,0)
 (postgresql-2022-10-19.csv,7368)
 (postgresql-2022-10-19.log,7350)
 (postgresql-2022-10-20.csv,4378)
 (postgresql-2022-10-20.log,4183)
 (postgresql-2022-10-21.csv,0)
 (postgresql-2022-10-21.log,0)
 (postgresql-2022-10-22.csv,0)
 (postgresql-2022-10-22.log,0)
 (postgresql-2022-10-23.csv,0)
 (postgresql-2022-10-23.log,0)
 (postgresql-2022-10-24.csv,0)
 (postgresql-2022-10-24.log,0)
 (postgresql-2022-10-25.csv,0)
 (postgresql-2022-10-25.log,0)
 (postgresql-2022-10-26.csv,0)
 (postgresql-2022-10-26.log,0)
 (postgresql-2022-10-27.csv,0)
 (postgresql-2022-10-27.log,0)
 (postgresql-2022-10-28.csv,0)
 (postgresql-2022-10-28.log,0)
 (postgresql-2022-10-29.csv,0)
 (postgresql-2022-10-29.log,0)
 (postgresql-2022-10-30.csv,0)
 (postgresql-2022-10-30.log,0)
 (postgresql-2022-10-31.csv,0)
 (postgresql-2022-10-31.log,0)
 (postgresql-2022-11-01.csv,4025)
 (postgresql-2022-11-01.log,3641)
 (postgresql-2022-11-02.csv,7945)
 (postgresql-2022-11-02.log,8206)
 (postgresql-2022-11-03.csv,0)
 (postgresql-2022-11-03.log,0)
 (postgresql-2022-11-04.csv,3943)
 (postgresql-2022-11-04.log,3735)
 (postgresql-2022-11-05.csv,0)
 (postgresql-2022-11-05.log,0)
 (postgresql-2022-11-06.csv,0)
 (postgresql-2022-11-06.log,0)
 (postgresql-2022-11-07.csv,0)
 (postgresql-2022-11-07.log,0)
 (postgresql-2022-11-08.csv,5098)
 (postgresql-2022-11-08.log,5267)
 (postgresql-2022-11-09.csv,0)
 (postgresql-2022-11-09.log,0)
 (postgresql-2022-11-10.csv,811)
 (postgresql-2022-11-10.log,668)
 (postgresql-2022-11-11.csv,4261)
 (postgresql-2022-11-11.log,5287)
 (postgresql-2022-11-12.csv,0)
 (postgresql-2022-11-12.log,0)
 (postgresql-2022-11-13.csv,0)
 (postgresql-2022-11-13.log,0)
 (postgresql-2022-11-14.csv,7735)
 (postgresql-2022-11-14.log,8006)
 (postgresql-2022-11-15.csv,0)
 (postgresql-2022-11-15.log,0)
 (postgresql-2022-11-16.csv,0)
 (postgresql-2022-11-16.log,0)
 (postgresql-2022-11-17.csv,69566)
 (postgresql-2022-11-17.log,91650)
 (postgresql-2022-11-18.csv,0)
 (postgresql-2022-11-18.log,0)
 (postgresql-2022-11-19.csv,0)
 (postgresql-2022-11-19.log,0)
 (postgresql-2022-11-20.csv,0)
 (postgresql-2022-11-20.log,0)
 (postgresql-2022-11-21.csv,73201)
 (postgresql-2022-11-21.log,102180)
 (postgresql-2022-11-22.csv,20339)
 (postgresql-2022-11-22.log,28669)
 (postgresql-2022-11-23.csv,568208)
 (postgresql-2022-11-23.log,789872)
 (postgresql-2022-11-24.csv,0)
 (postgresql-2022-11-24.log,0)
 (postgresql-2022-11-25.csv,0)
 (postgresql-2022-11-25.log,0)
 (postgresql-2022-11-26.csv,0)
 (postgresql-2022-11-26.log,0)
 (postgresql-2022-11-27.csv,0)
 (postgresql-2022-11-27.log,0)
 (postgresql-2022-11-28.csv,23400)
 (postgresql-2022-11-28.log,31333)
(94 rows)

-- make sure helper function for creating table works
SELECT create_foreign_table_for_log_file('my_postgres_error_log', 'log_server', 'postgresql.log.2016-08-09-22.csv');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT log_time, message from my_postgres_error_log order by 1;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.2016-08-09-22.csv" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
-- make sure helper function for creating table errors out at appropriate times
SELECT create_foreign_table_for_log_file('my_postgres_error_log_2', 'log_server', 'postgresql.log.doesnt_exist.csv');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT create_foreign_table_for_log_file('my_postgres_error_log', 'log_server', 'postgresql.log.2016-08-09-22.csv');
ERROR:  relation "my_postgres_error_log" already exists
CONTEXT:  SQL statement "CREATE FOREIGN TABLE my_postgres_error_log (
		  log_time			timestamp(3) with time zone,
		  user_name			text,
		  database_name			text,
		  process_id			integer,
		  connection_from		text,
		  session_id			text,
		  session_line_num		bigint,
		  command_tag			text,
		  session_start_time		timestamp with time zone,
		  virtual_transaction_id	text,
		  transaction_id		bigint,
		  error_severity		text,
		  sql_state_code		text,
		  message			text,
		  detail			text,
		  hint				text,
		  internal_query		text,
		  internal_query_pos		integer,
		  context			text,
		  query				text,
		  query_pos			integer,
		  location			text,
		  application_name		text,
		  backend_type			text,
		  leader_pid			integer,
		  query_id			bigint
		) SERVER log_server
		OPTIONS (filename '/home/kadamnn/workplace/pg_14/data/log/postgresql.log.2016-08-09-22.csv')"
PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 16 at EXECUTE
SELECT create_foreign_table_for_log_file('my_postgres_error_log_2', 'doesnt_exist', 'postgresql.log.2016-08-09-22.csv');
ERROR:  relation "my_postgres_error_log_2" already exists
CONTEXT:  SQL statement "CREATE FOREIGN TABLE my_postgres_error_log_2 (
		  log_time			timestamp(3) with time zone,
		  user_name			text,
		  database_name			text,
		  process_id			integer,
		  connection_from		text,
		  session_id			text,
		  session_line_num		bigint,
		  command_tag			text,
		  session_start_time		timestamp with time zone,
		  virtual_transaction_id	text,
		  transaction_id		bigint,
		  error_severity		text,
		  sql_state_code		text,
		  message			text,
		  detail			text,
		  hint				text,
		  internal_query		text,
		  internal_query_pos		integer,
		  context			text,
		  query				text,
		  query_pos			integer,
		  location			text,
		  application_name		text,
		  backend_type			text,
		  leader_pid			integer,
		  query_id			bigint
		) SERVER doesnt_exist
		OPTIONS (filename '/home/kadamnn/workplace/pg_14/data/log/postgresql.log.2016-08-09-22.csv')"
PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 16 at EXECUTE
SELECT create_foreign_table_for_log_file(123, 456, 789);
ERROR:  function create_foreign_table_for_log_file(integer, integer, integer) does not exist
LINE 1: SELECT create_foreign_table_for_log_file(123, 456, 789);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- double check the identifier quoting
SELECT create_foreign_table_for_log_file('quote me', 'log_server', 'postgresql.log.2016-08-09-22.csv');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT log_time, message from "quote me" order by 1;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.2016-08-09-22.csv" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
-- make sure you cannot hax the helper function for creating table
SELECT create_foreign_table_for_log_file('dealwithit"; select 1; --', 'whatever', 'whatever');
ERROR:  server "whatever" does not exist
CONTEXT:  SQL statement "CREATE FOREIGN TABLE "dealwithit""; select 1; --" (
		  log_entry text
		) SERVER whatever
		OPTIONS (filename '/home/kadamnn/workplace/pg_14/data/log/whatever')"
PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 47 at EXECUTE
-- make sure you cannot create a foreign table for the log directory or its parent directory
SELECT create_foreign_table_for_log_file('postgres_log_dir', 'log_server', '.');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT create_foreign_table_for_log_file('postgres_log_dir', 'log_server', '..');
ERROR:  relation "postgres_log_dir" already exists
CONTEXT:  SQL statement "CREATE FOREIGN TABLE postgres_log_dir (
		  log_entry text
		) SERVER log_server
		OPTIONS (filename '/home/kadamnn/workplace/pg_14/data/log/..')"
PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 47 at EXECUTE
SELECT create_foreign_table_for_log_file('postgres_log_dir', 'log_server', '');
ERROR:  relation "postgres_log_dir" already exists
CONTEXT:  SQL statement "CREATE FOREIGN TABLE postgres_log_dir (
		  log_entry text
		) SERVER log_server
		OPTIONS (filename '/home/kadamnn/workplace/pg_14/data/log/')"
PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 47 at EXECUTE
-- make sure you can create foreign table for non-CSV files
SELECT create_foreign_table_for_log_file('sonnet116', 'log_server', 'sonnet116.txt');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT create_foreign_table_for_log_file('n', 'log_server', 'n');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from sonnet116;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/sonnet116.txt" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
SELECT * from n;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/n" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
-- make sure we can create foreign table for compressed csv and non-csv files
SELECT create_foreign_table_for_log_file('sonnet116_compressed', 'log_server', 'sonnet116.compressed.txt.gz');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT create_foreign_table_for_log_file('pglog_compressed', 'log_server', 'postgresql.log.2016-08-09-22.compressed.csv.gz');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from sonnet116_compressed;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/sonnet116.compressed.txt.gz" for reading: No such file or directory
SELECT log_time, message from "pglog_compressed" order by 1;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.2016-08-09-22.compressed.csv.gz" for reading: No such file or directory
-- make sure badly formatted compressed files throw error
SELECT create_foreign_table_for_log_file('badcsv_compressed', 'log_server', 'badcsvformat.csv.gz');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from badcsv_compressed; --ERROR
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/badcsvformat.csv.gz" for reading: No such file or directory
SELECT create_foreign_table_for_log_file('badgz_compressed', 'log_server', 'postgresql.log.bad.gzfile.gz');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from badgz_compressed; --ERROR
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.bad.gzfile.gz" for reading: No such file or directory
-- make sure log_fdw will generate apporiate error report when log file or a portion of the log file was created by a version of PostgreSQL that the installed version of log_fdw cannot read
SELECT create_foreign_table_for_log_file('pglog_old', 'log_server', 'postgresql.log.old.csv');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from pglog_old;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.old.csv" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
SELECT create_foreign_table_for_log_file('pglog_mix', 'log_server', 'postgresql.log.mix.csv');
 create_foreign_table_for_log_file 
-----------------------------------
 
(1 row)

SELECT * from pglog_mix;
ERROR:  could not open file "/home/kadamnn/workplace/pg_14/data/log/postgresql.log.mix.csv" for reading: No such file or directory
HINT:  COPY FROM instructs the PostgreSQL server process to read a file. You may want a client-side facility such as psql's \copy.
-- non-rds_superusers can run create_foreign_table_for_log_file()
GRANT EXECUTE ON FUNCTION create_foreign_table_for_log_file(text, text, text) TO no_priv_user;
GRANT USAGE ON FOREIGN SERVER log_server TO no_priv_user;
SET ROLE no_priv_user;
SELECT create_foreign_table_for_log_file('priv_test', 'log_server', 'sonnet116.txt');
ERROR:  syntax error at or near "NULL"
LINE 4:   OPTIONS (filename NULL)
                            ^
QUERY:  CREATE FOREIGN TABLE priv_test (
		  log_entry text
		) SERVER log_server
		OPTIONS (filename NULL)
CONTEXT:  PL/pgSQL function create_foreign_table_for_log_file(text,text,text) line 47 at EXECUTE
RESET ROLE;
-- file path is checked even without validator function
ALTER FOREIGN DATA WRAPPER log_fdw NO VALIDATOR;
CREATE FOREIGN TABLE validator1 (a INT) SERVER log_server OPTIONS (filename '/a/b/c');
CREATE FOREIGN TABLE validator2 (a INT) SERVER log_server OPTIONS (filename 'alsdfkjalskdjfhlsdkjhasdflkjahsdflkjhasdflkjhasdlfkjahsdlfkjhasdlkfjhasdf');
CREATE FOREIGN TABLE validator3 (a INT) SERVER log_server OPTIONS (filename '/rdsdbdata/log/error/../../../hax.csv');
CREATE FOREIGN TABLE validator4 (a INT) SERVER log_server OPTIONS (filename '/rdsdbdata/log/error/postgresql.log.abcdef.csv');
CREATE FOREIGN TABLE validator5 (a INT) SERVER log_server OPTIONS (filename '/rdsdbdata/log/error');
CREATE FOREIGN TABLE validator6 (a INT) SERVER log_server OPTIONS (filename '/rdsdbdata/log/error/');
CREATE FOREIGN TABLE validator7 (a INT) SERVER log_server OPTIONS (filename '/rdsdbdata/log/error/../../../somefile.txt');
SELECT * FROM validator1;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator2;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator3;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator4;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator5;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator6;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
SELECT * FROM validator7;
ERROR:  The log file path specified was invalid.
HINT:  Use list_postgres_log_files() and create_foreign_table_for_log_file(table_name text, server_name text, log_file_name text) to easily create foreign data wrappers to Postgres log files
-- cleanup
DROP EXTENSION log_fdw CASCADE;
NOTICE:  drop cascades to 27 other objects
DETAIL:  drop cascades to server log_server
drop cascades to user mapping for log_fdw_superuser on server log_server
drop cascades to user mapping for no_priv_user on server log_server
drop cascades to foreign table agg_text
drop cascades to foreign table pglog_1
drop cascades to foreign table pglog_2
drop cascades to foreign table pglog_3
drop cascades to foreign table pglog_bad
drop cascades to foreign table my_postgres_error_log
drop cascades to foreign table my_postgres_error_log_2
drop cascades to foreign table "quote me"
drop cascades to foreign table postgres_log_dir
drop cascades to foreign table sonnet116
drop cascades to foreign table n
drop cascades to foreign table sonnet116_compressed
drop cascades to foreign table pglog_compressed
drop cascades to foreign table badcsv_compressed
drop cascades to foreign table badgz_compressed
drop cascades to foreign table pglog_old
drop cascades to foreign table pglog_mix
drop cascades to foreign table validator1
drop cascades to foreign table validator2
drop cascades to foreign table validator3
drop cascades to foreign table validator4
drop cascades to foreign table validator5
drop cascades to foreign table validator6
drop cascades to foreign table validator7
DROP ROLE log_fdw_superuser, log_fdw_user, no_priv_user;
